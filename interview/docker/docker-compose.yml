services:
  interview-mysql:
    container_name: interview-mysql
    image: mysql:8.0
    build:
      context: ./mysql
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/logs:/logs
      - ./mysql/data:/var/lib/mysql
       # 挂载初始化脚本
      - ./mysql/init:/docker-entrypoint-initdb.d
    command: [
      'mysqld',
      '--default-authentication-plugin=mysql_native_password',
      '--innodb-buffer-pool-size=80M',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--default-time-zone=+8:00',
      '--lower-case-table-names=1'
    ]
    environment:
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]   # 为 MySQL 添加健康检查，确保 eureka 启动时 MySQL 已就绪
      interval: 10s  # 每10秒检查一次
      timeout: 5s    # 超时5秒
      retries: 10    # 重试10次
    networks:
      - spring-cloud-network

  interview-nginx:
    container_name: interview-nginx
    image: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/html/dist:/home/interview/projects/frontend
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - interview-gateway
    networks:
      - spring-cloud-network

  interview-ldap:
    container_name: interview-ldap
    image: osixia/openldap:latest  # 使用最新版本
    environment:
      LDAP_ORGANISATION: "Example Inc."
      LDAP_DOMAIN: "example.com"
      LDAP_ADMIN_PASSWORD: "Adm!nP@ss2024"  # 强密码
      LDAP_CONFIG_PASSWORD: "C0nf!gP@ss2024"  # 强密码
      LDAP_ADDITIONAL_SCHEMAS: "cosine,inetorgperson,nis"
      # 预配置用户及独立密码
      LDAP_USERS: "user_1,editor_1,admin_1"
      LDAP_PASSWORDS: "User1Pass,Editor1Pass,Admin1Pass"
    ports:
      - "389:389"  # 明文端口（建议仅测试用）
      # - "636:636"  # 需配置 TLS 后启用
    volumes:
      - ./ldap/ldap_data:/var/lib/ldap
      - ./ldap/ldap_config:/etc/ldap/slapd.d
    networks:
      - spring-cloud-network
  interview-ldap-admin:
    container_name: interview-ldap-admin
    image: osixia/phpldapadmin:latest
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: "interview-ldap"
      PHPLDAPADMIN_HTTPS: "false"  # 如果不需要HTTPS可以设为false
    ports:
      - "8080:80"  # 将容器的80端口映射到主机的8080端口
    depends_on:
      - interview-ldap
    networks:
      - spring-cloud-network

  interview-auth:
    container_name: interview-auth
    build:
      context: interview/auth
      dockerfile: Dockerfile
    ports:
      - "9001:9001"
    depends_on:
      - interview-mysql
      - interview-ldap
      - interview-eureka
    environment:
      SERVER_PORT: 9001
      SPRING_PROFILES_ACTIVE: dev
      MYSQL_URL: jdbc:mysql://interview-mysql:3306/auth_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: Adm!nP@ss2024
      LDAP_URL: ldap://ldap
      LDAP_USER_DN_PATTERN: uid={0},ou=people,dc=interview,dc=com
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_HOST: interview-eureka
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_PORT: "8761"
      SPRING_CLOUD_DISCOVERY_ENABLED: "true"
      SPRING_CLOUD_EUREKA_USE_DNS: "true"
      SPRING_CLOUD_EUREKA_INSTANCE_INFO_REPLICATOR_ENABLED: "true"
    networks:
      - spring-cloud-network

  interview-product:
    container_name: interview-product
    build:
      context: ./interview/product
      dockerfile: Dockerfile
    ports:
      - "9002:9002"
    depends_on:
      interview-mysql:
        condition: service_healthy
      interview-eureka:
        condition: service_started
    environment:
      SERVER_PORT: 9002
      SPRING_PROFILES_ACTIVE: dev
      MYSQL_URL: jdbc:mysql://interview-mysql:3306/product_db
      MYSQL_USER: product_user
      MYSQL_PASSWORD: Adm!nP@ss2024
      LDAP_URL: ldap://ldap
      LDAP_USER_DN_PATTERN: uid={0},ou=people,dc=interview,dc=com
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_HOST: interview-eureka
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_PORT: "8761"
      SPRING_CLOUD_DISCOVERY_ENABLED: "true"
      SPRING_CLOUD_EUREKA_USE_DNS: "true"
      SPRING_CLOUD_EUREKA_INSTANCE_INFO_REPLICATOR_ENABLED: "true"
    networks:
      - spring-cloud-network

  interview-gateway:
    container_name: interview-gateway
    build:
      context: ./interview/gateway
      dockerfile: Dockerfile
    ports:
      - "7573:7573"
    depends_on:
      - interview-eureka
    environment:
      SERVER_PORT: 7573
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_HOST: interview-eureka
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_PORT: "8761"
      SPRING_CLOUD_DISCOVERY_ENABLED: "true"
      SPRING_CLOUD_EUREKA_USE_DNS: "true"
      SPRING_CLOUD_EUREKA_INSTANCE_INFO_REPLICATOR_ENABLED: "true"
    networks:
      - spring-cloud-network

  interview-eureka:
    container_name: interview-eureka
    build:
      context: ./interview/eureka
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      SERVER_PORT: 8761
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_HOST: interview-eureka
      SPRING_CLOUD_DISCOVERY_CLIENT_SIMPLE_INSTANCES_INTERVIEW-EUREKA_0_PORT: "8761"
      SPRING_CLOUD_DISCOVERY_ENABLED: "true"
      SPRING_CLOUD_EUREKA_USE_DNS: "true"
      SPRING_CLOUD_EUREKA_INSTANCE_INFO_REPLICATOR_ENABLED: "true"
    healthcheck:
      test: [ "CMD", "sh", "-c", "wget -qO- http://interview-eureka:8761/eureka/apps | grep -q '<applications>'" ]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - spring-cloud-network

#  interview-config:
#    container_name: interview-config
#    build:
#      context: ./interview/config
#      Dockerfile: Dockerfile
#    ports:
#      - "8888:8888"
#    depends_on:
#      interview-mysql:
#        condition: service_healthy   # 只有当MySQL健康时才启动
#    environment:
#      SPRING_PROFILES_ACTIVE: dev
#    networks:
#      - spring-cloud-network

networks:
  spring-cloud-network:
    driver: bridge
#    ipam:
#      config:
#        - subnet: 172.22.0.0/16  # 仍然定义子网但不强制分配IP